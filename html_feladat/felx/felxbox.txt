<div class="container">
  <div>1</div>
  <div>2</div>
  <div>3</div>
</div>

.container {
  display: flex;              /* 📺 A szülő flex-konténer lesz */
  justify-content: space-between; /* 📏 Elem elosztás a főtengely mentén */
  align-items: center;        /* 🎯 Igazítás a kereszttengely mentén */
  gap: 10px;                  /* ↔ Közök a gyermekek között */
}

.container div {
  flex: 1; /* ⚖️ Minden gyerek egyforma szélességű lesz */
}

.container {
  display: flex;
  flex-direction: row; /* vagy column, row-reverse, column-reverse */
}

display: flex; – 🧩 Rugalmas elrendezés: a <div class="container"> lesz a flex-konténer, a benne lévő elemek pedig flex-elemek.
gap: 10px; – ↔ Térköz: 10px helyet hagy az elemek között (nem kell külön margin).
justify-content: – 📏 Elosztás vízszintesen (ha flex-direction: row):
	fex-start ⬅️➡️ elemek balra igazítva
	flex end ➡️➡️ elemek jobbra igazítva
	enter 🎯 elemek középre rakva
	space-between 🔀 első az elején, utolsó a végén, a többi egyenlően osztva
	space-around ➖ egyenlő hely minden elem körül
	space-evenly 🟰 teljesen egyenlő távolság mindenhol
align-items: center; – 🎯 Igazítás függőlegesen (kereszttengely mentén):
	flex-start ⬆️ tetejére igazít
	flex-end ⬇️ aljára igazít
	center 🎯 függőleges közép
	stretch ↕️ kitölti a teljes magasságot
	baseline 📏 a szöveg alapvonalához igazít

flex: 1; – ⚖️ Rugalmas méretezés: mindhárom gyerek egyforma szélességet kap.

flex-direction

	 row → vízszintes sor, balról jobbra
	 row-reverse → vízszintes sor, jobbról balra
	 column → függőleges oszlop, felülről lefelé
	 column-reverse → függőleges oszlop, alulról felfelé
